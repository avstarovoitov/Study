# -*- mode: ruby -*-
# vim: set ft=ruby :
# -*- mode: ruby -*-
# vim: set ft=ruby :

MACHINES = {
  :inetRouter1 => {
        :box_name => "centos/7",
        :net => [
                   {ip: '192.168.255.1', adapter: 2, netmask: "255.255.255.0", virtualbox__intnet: "router-net"},
                ]
  },

  :inetRouter2 => {
        :box_name => "centos/7",
        :net => [  
                   {ip: '192.168.255.2', adapter: 2, netmask: "255.255.255.0", virtualbox__intnet: "router-net"},
                ]
  },

  :centralRouter => {
        :box_name => "centos/7",
        :net => [
                   {ip: '192.168.255.3', adapter: 2, netmask: "255.255.255.0", virtualbox__intnet: "router-net"},
                   {ip: '192.168.0.1', adapter: 3, netmask: "255.255.255.0", virtualbox__intnet: "server-net"},
                ]
  },
  
  :centralServer => {
        :box_name => "centos/7",
        :net => [
                   {ip: '192.168.0.2', adapter: 2, netmask: "255.255.255.0", virtualbox__intnet: "server-net"},
                ]
  },
}

Vagrant.configure("2") do |config|

  MACHINES.each do |boxname, boxconfig|

    config.vm.define boxname do |box|

        box.vm.provider :virtualbox do |vb|
                    vb.customize ["modifyvm", :id, "--memory", "256"]
                end
        box.vm.box = boxconfig[:box_name]
        box.vm.host_name = boxname.to_s
        boxconfig[:net].each do |ipconf|
          box.vm.network "private_network", ipconf
        end
        
        if boxconfig.key?(:public)
          box.vm.network "public_network", boxconfig[:public]
        end

        box.vm.provision "shell", inline: <<-SHELL
          mkdir -p ~root/.ssh
                cp ~vagrant/.ssh/auth* ~root/.ssh
        SHELL
        
        case boxname.to_s
        when "inetRouter1"
          box.vm.provision "shell", run: "always", inline: <<-SHELL
            sysctl net.ipv4.conf.all.forwarding=1
            ip route add 192.168.0.0/16 via 192.168.255.3 dev eth1
            SHELL
          config.vm.provision "ansible" do |ansible|
            ansible.playbook = "provisioning/firewall.yml"
            ansible.become = "true"
          end
        when "inetRouter2"
          config.vm.network  "forwarded_port", guest: 80, host: 8080, auto_correct: true
          box.vm.provision "shell", run: "always", inline: <<-SHELL
            ip route add 192.168.0.0/16 via 192.168.255.3 dev eth1
            SHELL
          config.vm.provision "ansible" do |ansible|
            ansible.playbook = "provisioning/firewall.yml"
            ansible.become = "true"
          end
        when "centralRouter"
          box.vm.provision "shell", run: "always", inline: <<-SHELL
            sysctl net.ipv4.conf.all.forwarding=1
            echo "DEFROUTE=no" >> /etc/sysconfig/network-scripts/ifcfg-eth0 
            echo "GATEWAY=192.168.255.1" >> /etc/sysconfig/network-scripts/ifcfg-eth1
            systemctl restart network
            ip route del default dev eth0
            ip route add default via 192.168.255.1 dev eth1
            SHELL
          config.vm.provision "ansible" do |ansible|
            ansible.playbook = "provisioning/knock.yml"
            ansible.become = "true"
          end
        when "centralServer"
          box.vm.provision "shell", run: "always", inline: <<-SHELL
            echo "DEFROUTE=no" >> /etc/sysconfig/network-scripts/ifcfg-eth0 
            echo "GATEWAY=192.168.0.1" >> /etc/sysconfig/network-scripts/ifcfg-eth1
            sudo systemctl restart network
            ip route del default dev eth0
            ip route add default via 192.168.0.1 dev eth1
            SHELL
          config.vm.provision "ansible" do |ansible|
            ansible.playbook = "provisioning/nginx.yml"
            ansible.become = "true"
          end

      end
    end
  end
end
